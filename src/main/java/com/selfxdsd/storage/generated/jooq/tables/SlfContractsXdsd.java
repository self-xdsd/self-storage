/*
 * This file is generated by jOOQ.
 */
package com.selfxdsd.storage.generated.jooq.tables;


import com.selfxdsd.storage.generated.jooq.Indexes;
import com.selfxdsd.storage.generated.jooq.Keys;
import com.selfxdsd.storage.generated.jooq.SelfXdsd;
import com.selfxdsd.storage.generated.jooq.tables.records.SlfContractsXdsdRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlfContractsXdsd extends TableImpl<SlfContractsXdsdRecord> {

    private static final long serialVersionUID = -1130919742;

    /**
     * The reference instance of <code>self_xdsd.slf_contracts_xdsd</code>
     */
    public static final SlfContractsXdsd SLF_CONTRACTS_XDSD = new SlfContractsXdsd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlfContractsXdsdRecord> getRecordType() {
        return SlfContractsXdsdRecord.class;
    }

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.repo_fullname</code>.
     */
    public final TableField<SlfContractsXdsdRecord, String> REPO_FULLNAME = createField(DSL.name("repo_fullname"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.username</code>.
     */
    public final TableField<SlfContractsXdsdRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.provider</code>.
     */
    public final TableField<SlfContractsXdsdRecord, String> PROVIDER = createField(DSL.name("provider"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.role</code>.
     */
    public final TableField<SlfContractsXdsdRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.hourly_rate</code>.
     */
    public final TableField<SlfContractsXdsdRecord, Long> HOURLY_RATE = createField(DSL.name("hourly_rate"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contracts_xdsd.markedForRemoval</code>.
     */
    public final TableField<SlfContractsXdsdRecord, LocalDateTime> MARKEDFORREMOVAL = createField(DSL.name("markedForRemoval"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>self_xdsd.slf_contracts_xdsd</code> table reference
     */
    public SlfContractsXdsd() {
        this(DSL.name("slf_contracts_xdsd"), null);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_contracts_xdsd</code> table reference
     */
    public SlfContractsXdsd(String alias) {
        this(DSL.name(alias), SLF_CONTRACTS_XDSD);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_contracts_xdsd</code> table reference
     */
    public SlfContractsXdsd(Name alias) {
        this(alias, SLF_CONTRACTS_XDSD);
    }

    private SlfContractsXdsd(Name alias, Table<SlfContractsXdsdRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlfContractsXdsd(Name alias, Table<SlfContractsXdsdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SlfContractsXdsd(Table<O> child, ForeignKey<O, SlfContractsXdsdRecord> key) {
        super(child, key, SLF_CONTRACTS_XDSD);
    }

    @Override
    public Schema getSchema() {
        return SelfXdsd.SELF_XDSD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SLF_CONTRACTS_XDSD_CONTRIBUTOR, Indexes.SLF_CONTRACTS_XDSD_PROJECT);
    }

    @Override
    public UniqueKey<SlfContractsXdsdRecord> getPrimaryKey() {
        return Keys.KEY_SLF_CONTRACTS_XDSD_PRIMARY;
    }

    @Override
    public List<UniqueKey<SlfContractsXdsdRecord>> getKeys() {
        return Arrays.<UniqueKey<SlfContractsXdsdRecord>>asList(Keys.KEY_SLF_CONTRACTS_XDSD_PRIMARY);
    }

    @Override
    public List<ForeignKey<SlfContractsXdsdRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SlfContractsXdsdRecord, ?>>asList(Keys.PROJECT, Keys.CONTRIBUTOR);
    }

    public SlfProjectsXdsd slfProjectsXdsd() {
        return new SlfProjectsXdsd(this, Keys.PROJECT);
    }

    public SlfContributorsXdsd slfContributorsXdsd() {
        return new SlfContributorsXdsd(this, Keys.CONTRIBUTOR);
    }

    @Override
    public SlfContractsXdsd as(String alias) {
        return new SlfContractsXdsd(DSL.name(alias), this);
    }

    @Override
    public SlfContractsXdsd as(Name alias) {
        return new SlfContractsXdsd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfContractsXdsd rename(String name) {
        return new SlfContractsXdsd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfContractsXdsd rename(Name name) {
        return new SlfContractsXdsd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
